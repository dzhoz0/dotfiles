{
    "lalid is cute :3": {
      "prefix": "cpcf",
      "body": [
        "/*",
        "    ghmt the cutie :3",
        "          UwU",
        "*/",
        "",
        "#include <bits/stdc++.h>",
        "using namespace std;",
        "",
        "#define int long long",
        "#define INF 1e18",
        "#define f first",
        "#define s second",
        "#define pii pair<int, int>",
        "#define vi vector<int>",
        "",
        "const int MOD = 1'000'000'000 + 7;",
        "",
        "void setIO(string name = \"\")",
        "{",
        "    ios_base::sync_with_stdio(0);",
        "    cin.tie(0), cout.tie(0);",
        "#ifdef LOCAL",
        "    freopen(\"inp.txt\", \"r\", stdin);",
        "    freopen(\"out.txt\", \"w\", stdout);",
        "#else",
        "    if (!name.empty())",
        "    {",
        "        freopen((name + \".INP\").c_str(), \"r\", stdin);",
        "        freopen((name + \".OUT\").c_str(), \"w\", stdout);",
        "    }",
        "#endif",
        "}",
        "",
        "void solve()",
        "{",
        "    $0",
        "}",
        "signed main()",
        "{",
        "    setIO();",
        "    int t = 1;",
        "    // cin >> t;",
        "    while (t--)",
        "        solve();",
        "}",
        ""
      ],
      "description": "ghmt is cute :3"
    },
    "Simplest segtree:3": {
      "prefix": "nsegtree",
      "body": [
        "struct SegmentTree {",
        "    vi t;",
        "    int f(int a, int b) {",
        "        return a + b;",
        "    }",
        "    SegmentTree(vi &a) {",
        "        int n = (int)a.size();",
        "        t.resize(4 * n);",
        "        build(a, 1, 0, n - 1);",
        "    }",
        "    // Default paramenters, v = 1, tl = 0, tr = 1",
        "    void build(vi &a, int v, int tl, int tr) {",
        "        if(tl == tr) t[v] = a[tl];",
        "        else {",
        "            int tm = (tl + tr) / 2;",
        "            build(a, v * 2, tl, tm);",
        "            build(a, v * 2 + 1, tm + 1, tr);",
        "            t[v] = f(t[v * 2], t[v * 2 + 1]);",
        "        }",
        "    }",
        "    ",
        "    void upd(int v, int tl, int tr, int pos, int new_val) {",
        "        if(tl == tr) t[v] = new_val;",
        "        else {",
        "            int tm = (tl + tr) / 2;",
        "            if(pos <= tm) upd(v * 2, tl, tm, pos, new_val);",
        "            else upd(v * 2+1, tm+1,tr,pos, new_val);",
        "            t[v] = f(t[v*2],t[v*2+1]);",
        "        }",
        "    }",
        "",
        "    int query(int v, int tl, int tr, int l, int r) {",
        "        if(l > r) return 0;",
        "        if(l == tl && r == tr) return t[v];",
        "        int tm = (tl + tr) / 2;",
        "        int val1 = query(v * 2, tl, tm, l, min(r, tm));",
        "        int val2 = query(v * 2+1, tm+1,tr, max(l, tm + 1), r);",
        "        return f(val1, val2);",
        "    }",
        "};",
        ""
      ],
      "description": "Simplest segment tree:3"
    },
    "mul and exp with lykina22:3": {
      "prefix": "binmulexp",
      "body": [
        "int binmul(int a, int b) {",
        "    int res = 0;",
        "    while(b != 0) {",
        "        if(b & 1) res += a, res %= MOD;",
        "        a <<= 1;",
        "        a %= MOD;",
        "        b >>= 1;",
        "    }",
        "    return res;",
        "}",
        "",
        "int binpow(int a, int b) {",
        "    int res = 1;",
        "    while(b > 0) {",
        "        if(b & 1) res = binmul(res, a);",
        "        a = binmul(a, a);",
        "        b >>= 1;",
        "    }",
        "    return res;",
        "}",
        ""
      ],
      "description": "mul and exp with :3"
    },
    "Compresser": {
      "prefix": "compress",
      "body": [
        "struct Compressor {",
        "    vi v;",
        "    int sz(int x) { return (int)v.size(); }",
        "",
        "    void add(int x) {",
        "        v.push_back(x);",
        "    }",
        "    ",
        "    void init() {",
        "        sort(v.begin(), v.end());",
        "        v.erase(unique(v.begin(), v.end()), v.end());",
        "    }",
        "",
        "    int id(int key) {",
        "        return lower_bound(v.begin(), v.end(), key) - v.begin() + 1;",
        "    }",
        "};",
        ""
      ],
      "description": "Compresser"
    }

}
